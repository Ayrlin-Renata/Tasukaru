/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ayrlin.tasukaru;

import com.ayrlin.tasukaru.services.TasukaruCommandService;

import co.casterlabs.caffeinated.pluginsdk.*;
import lombok.Getter;
import xyz.e3ndr.fastloggingframework.logging.FastLogger;
import xyz.e3ndr.reflectionlib.ReflectionLib;

@CaffeinatedPluginImplementation
public class Tasukaru extends CaffeinatedPlugin {
    private static Tasukaru instance = null;
    private @Getter VBHandler vbHandler = null;

    private FastLogger log;

    /**
     * use this singleton dont construct another
     * @return THE ONE TASUKARU
     */
    public static Tasukaru instance() {
        if(instance == null) {
            throw new IllegalStateException("Wait for tskr to be initialized first!");
        }
        return instance;
    }

    @Override
    public void onInit() {
        log = this.getLogger();
        if(instance != null) {
            log.warn("Second OnInit for duplicate tskr!!");
        }
        instance = this;

        log.debug("Tasukaru onInit()");
        log.info("I'm saved :3");

        // database init
        log.trace("initializing VBHandler!");
        vbHandler = new VBHandler();
        vbHandler.begin();

        //settings applet
        log.trace("creating Settings Applet!");
        this.createSettingsApplet();
        TSettings.instance().begin();

        //TLogic init
        TLogic.instance().begin();

        // listener registration
        log.trace("registering tasukaru koi listener!");
        addKoiListener(TListener.instance());

        //service registration
        log.trace("registering tasukaru interop service!");
        registerService("interop", new TasukaruCommandService());
        try {
            FastLogger.logStatic(ReflectionLib.getValue(this, "services"));
        } catch (Throwable t) {
            log.severe("Exception checking registered service: " + t.getMessage());
            t.printStackTrace();
        }
    }

    
    @Override
    /**
     * triggers when user unloads the plugin, NOT on application close
     */
    public void onClose() {
        log.debug("Tasukaru onClose()");
        
        log.info("Tasukaru is leaving bye!");
    }

    @Override
    public String getName() {
        return "Tasukaru";
    }
    
    @Override
    public String getId() {
        return "com.ayrlin.tasukaru";
    }

    @Override
    protected void onSettingsUpdate() {
        TSettings.instance().onSettingsUpdate();
    }
}